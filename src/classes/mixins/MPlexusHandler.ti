--[[
    @instance embeddedPlexus - Plexus Instance (def. false) - The Plexus instance that is embedded into CCDrop

    A mixin that handles the embedded Plexus instance.
]]

abstract class MPlexusHandler {
    embeddedPlexus = false;
}

--[[
    @instance
    @desc Embeds Plexus by setting the '_PLEXUS_START' function (Plexus calls this function if it can find it when it starts up)
          and setting the terminals chunk to the Plexus runtime (found at /.tpm/packages/Plexus).
]]
function MPlexusHandler:embedPlexus()
    local path = "/.tpm/packages/Plexus/" .. PLEXUS_VERSION
    if not fs.exists( path ) then
        self:addNotification( Notification( "File sending disabled", ( "Failed to embed Plexus (file not found).\n\nTry updating or reinstalling CCDrop manually via 'tpm install CCDrop --force'. Manually installing Plexus using 'tpm install Plexus:" .. PLEXUS_VERSION .."', may also help resolve issues." ), { { "ok", "Okay" } } ) )
        return
    end

    TI_VFS_RAW._PLEXUS_START = function( plexusInstance )
        client.embeddedPlexus = plexusInstance
        self:handlePlexus()
    end

    local pl, terminal = select( 1, loadfile( path ) ), client:query "Terminal".result[ 1 ]
    terminal:set( "chunk", function() pl( "/", "--", "--nosidebar", "--notitle", "--selector", "--noclose", "--nofooter" ); end )
    terminal.thread:on("finish", function( thread, ex )
        local n = self:addNotification( Notification( "Plexus closed unexpectedly", "The running installation of Plexus has " .. ( ex and "crashed ("..ex..")" or "exited unexpectedly." ), { { "return", "Return to Home" }, { "retry", "Reload Plexus" } } ) )

        n:on("retry", function() self:embedPlexus() end)
        n:on("return", function() self.state = "root" end )
    end)

    terminal.thread.crashSilently = true
end

--[[
    @instance
    @desc Handles the newly started Plexus embed by attaching the 'cancel' and 'confirm'
          callbacks to it (used for file selection).
]]
function MPlexusHandler:handlePlexus()
    local pl = self.embeddedPlexus
    pl:on( "cancel", function()
        pl.resolvedSelections = {}; pl:goToDirectory( "/", true )
        self.state = "root"
    end )

    pl:on( "confirm", function()
        self:sendContent()
        pl.resolvedSelections = {}; pl:goToDirectory( "/", true )
    end )

    os.queueEvent "PLEXUS_EMBED"
end
