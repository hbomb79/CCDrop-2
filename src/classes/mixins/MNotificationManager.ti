local function getTile( tiles, pos )
    for i = 1, #tiles do
        if tiles[ i ].position == pos then
            return tiles[ i ]
        end
    end
end

local function incrementPosition( tiles, position, increment )
    for i = 1, #tiles do
        if tiles[ i ].position >= position then
            tiles[ i ].position = tiles[ i ].position + increment
        end
    end
end

abstract class MNotificationManager {
    notifications = {};
    activeNotification = false;
    isPanelOpen = false;
}

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:openNotifications()
    notificationView:animate("notifPanel", "Y", 1, .25, "outSine")

    self.isPanelOpen = true
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:closeNotifications()
    notificationView:animate("notifPanel", "Y", -notificationView.height, .25, "inSine")
    notificationChanger:selectPage "main"

    self.isPanelOpen = false
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:addNotification( notification )
    table.insert( self.notifications, notification )

    notificationContent:addNode( notification ):configure()
    self:insertTileNotification( 1, TileNotification( notification ):set( "id", notification.__ID ) )

    if self.isPanelOpen then notification.hasBeenShown = true end

    self:updateDisplay()
    self.hasNotifications = #self.notifications > 0
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:removeNotification( notification )
    local function remove( notif )
        for i = 1, #self.notifications do
            if self.notifications[ i ] == notif then
                table.remove( self.notifications, i )
                break
            end
        end

        self:removeTileNotification( notification.__ID )
        self.hasNotifications = #self.notifications > 0

        self:updateDisplay()
    end

    if not self:hideActive( notification, function() remove( notification ) end ) then
        remove( notification )
    end
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:updateDisplay()
    if not self.isPanelOpen then
        if not self.activeNotification and #self.notifications > 0 then
            for i = 1, #self.notifications do
                if not self.notifications[ i ].hasBeenShown then
                    self.activeNotification = self.notifications[ i ]
                end
            end
        end
    end
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:generateButtons( target, X, Y, options, cb )
    X, Y = X or 2, Y or 9

    local rows = { {} }

    local options = options or target.options
    if not options then return 0 end

    local currentWidth = X
    for i = 1, #options do
        local name, text = options[ i ][ 1 ], options[ i ][ 2 ]

        currentWidth = currentWidth + 2 + #text
        if currentWidth > target.width then
            table.insert( rows, {} )
            currentWidth = X
            Y = Y + 2
        end

        rows[ #rows ].width = ( rows[ #rows ].width or 0 ) + #text + 4
        local b = target:addNode( Button( text ):set { id = name, Y = Y } ):on( "trigger", function() cb( name ) end )
        b:addClass "generated"

        table.insert( rows[ #rows ], b )
    end

    for r = 1, #rows do
        if not rows[ r ].width then break end

        local startX = math.ceil( target.width / 2 - ( rows[ r ].width / 2 ) + .5 )
        for b = 1, #rows[ r ] do
            local button = rows[ r ][ b ]
            button:set( "X", startX )
            startX = startX + button.width + 2
        end
    end

    return #rows
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:expandNotification( notif )
    -- Replace notif title and body
    local target = notificationChanger:query "Page#target".result[ 1 ]
    target:query "#notif_title":set( "text", notif.title )

    local body = target:query "#notif_body".result[ 1 ]:set( "text", notif.body or "" )
    body.height = math.max( 1, math.min( #body.lineConfig.lines, 6 ) )

    -- Spawn buttons
    target:query "Button.generated":each(function( button )
        target:removeNode( button )
    end)

    self:generateButtons( target, 4, body.Y + body.height + 2, notif.options, function( name ) self:closeNotifications(); self:removeNotification( notif ); notif:executeCallbacks( name ) end )

    -- Show page
    target.parent:selectPage "target"
end

--[[
    @instance
    @desc TODO
]]
function MNotificationManager:hideActive( notif, cb )
    if ( not notif or self.activeNotification == notif ) and self.activeNotification then
        self.activeNotification = false

        if cb then
            self:on("hiddenActive", function()
                self:off( "hiddenActive", "autoRemove" )
                cb()
            end, "autoRemove")
        end

        return true
    end

    return false
end


--[[
    @instance
    @desc TODO
]]
function MNotificationManager:setActiveNotification( activeNotification )
    if activeNotification then
        activeNotification:animate( "notificationSlide", "Y", 1, 0.15 )

        self:schedule( function()
            self:hideActive()
        end, 4, false, "notif_autohide" )
    else
        if self.activeNotification then
            self.activeNotification.hasBeenShown = true
            self.activeNotification:animate( "notificationSlide", "Y", -self.activeNotification.height, 0.25, "inOutCubic", function()
                self:executeCallbacks( "hiddenActive" )
            end )
        end

        self:unschedule "notif_autohide"
    end

    self.activeNotification = activeNotification
end

function MNotificationManager:insertTileNotification( position, tile )
    tile:configure()
    tile.position = position

    local tiles = notificationTiler.nodes
    if position > #tiles or #tiles == 0 then
        -- If the tile position is at the bottom or there are no other tiles, simply add it
        notificationTiler:addNode( tile:set {
            Y = ( #tiles ) * 3 + ( #tiles == 0 and 1 or 2 ),
            X = "$self.width"
        } ):animate( "tileEntry_" .. tile.__ID, "X", 2, 0.25, "outCubic" )
    else
        -- Increment all tiles under this by one
        incrementPosition( tiles, position, 1 )

        -- If the tile position requires the movement of other tiles, animate the tile under it to make way for the new tile, slide the new tile in, set the tile under it to inherit it's Y + height
        local underTile = getTile( tiles, position + 1 )

        -- Next, slide the new tile in from the side
        notificationTiler:addNode( tile:set { X = "$self.width", Y = ( position - 1 ) * 3 + 1 } )

        -- First, animate the tile under
        underTile:animate( "tileTransition_" .. tile.__ID, "Y", underTile.Y + 4, 0.15, "inCubic", function()
            underTile.Y = "${TileNotification#"..tile.id.."}.Y + {TileNotification#"..tile.id.."}.height + 1"
            notificationTiler:cacheContent()
            tile:animate( "tileEntry_" .. tile.__ID, "X", 2, 0.25, "outCubic" )
        end)
    end
end

function MNotificationManager:removeTileNotification( tileID )
    -- Find tile position
    local tiles, pos, tile = notificationTiler.nodes
    for i = 1, #tiles do
        if tiles[ i ].id == tileID then pos = tiles[ i ].position; tile = tiles[ i ] end
    end

    -- Slide tile out
    tile:animate( "tileTransition_" .. tile.__ID, "X", tile.width, 0.15, "inCubic", function()
        if pos < #tiles then
            -- Get tile under this one, and above
            local aboveTile, underTile = getTile( tiles, pos - 1 ), getTile( tiles, pos + 1 )

            -- Remove the old time
            notificationTiler:removeNode( tileID )

            -- If there is no tile above Animate underTile to '1'. Otherwise, create a dynamic value link to the tile above)
            incrementPosition( tiles, underTile.position, -1 )
            underTile:animate( "tileTransition_" .. tile.__ID, "Y", tile.Y, 0.15, "outCubic", function()
                underTile.Y = aboveTile and ("${TileNotification#%s}.Y + {TileNotification#%s}.height + 1"):format( aboveTile.id, aboveTile.id ) or 1
                notificationTiler:cacheContent()
            end )
        else
            -- Remove
            notificationTiler:removeNode( tileID )
        end
    end )
end

configureConstructor {
    argumentTypes = {
        notifications = "table",
        hasNotifications = "boolean"
    }
}
