abstract class MNotificationManager {
    notifications = {};
    activeNotification = false;
    isPanelOpen = false;
}

function MNotificationManager:openNotifications()
    notificationView:animate("notifPanel", "Y", 1, .25, "outSine")
end

function MNotificationManager:closeNotifications()
    notificationView:animate("notifPanel", "Y", -notificationView.height, .25, "inSine")
end

function MNotificationManager:addNotification( notification )
    table.insert( self.notifications, notification )

    notification.width = "$parent.width - 6"
    notification.Y = notification.height * -1

    if notification.bodyTextContainer then
        notification.bodyTextContainer.width = "$parent.width - 1"
    end

    notificationContent:addNode( notification )
    notificationTiler:addNode( TileNotification( notification ) ):set( "width", notificationTiler.width )
    self:updateDisplay()
end

function MNotificationManager:hideActive( cb )
    local notif = self.activeNotification
    if notif then
        notif:animate( "notificationSlide", "Y", -notif.height, 0.25, "inOutCubic", cb )
    end
end

function MNotificationManager:removeNotification( notification )
    local function remove( notif )
        for i = 1, #self.notifications do
            if self.notifications[ i ] == notif then
                table.remove( self.notifications, i )
                break
            end
        end
    end

    if self.activeNotification == notification then
        self:hideActive( function()
            self.activeNotification = false
            remove( notification )
        end )
    else
        remove( notification )
    end
end

function MNotificationManager:updateDisplay()
    if not self.activeNotification then
        self.activeNotification = self.notifications[ 1 ]
    end

    if not self.activeNotification then return end
    self.activeNotification:animate( "notificationSlide", "Y", 1, 0.15 )
end
