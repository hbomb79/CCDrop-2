abstract class MNotificationManager {
    notifications = {};
    activeNotification = false;
    isPanelOpen = false;
}

function MNotificationManager:openNotifications()
    notificationView:animate("notifPanel", "Y", 1, .25, "outSine")

    self.isPanelOpen = true
end

function MNotificationManager:closeNotifications()
    notificationView:animate("notifPanel", "Y", -notificationView.height, .25, "inSine")
    notificationChanger:selectPage "main"

    self.isPanelOpen = false
end

function MNotificationManager:addNotification( notification )
    table.insert( self.notifications, notification )

    notificationContent:addNode( notification ):configure()
    notificationTiler:addNode( TileNotification( notification ) ):set( "id", notification.__ID ):configure()

    self:updateDisplay()
    self.hasNotifications = #self.notifications > 0
end

function MNotificationManager:generateButtons( target, X, Y, options, cb )
    X, Y = X or 2, Y or 9

    local rows = { {} }

    local options = options or target.options
    if not options then return 0 end

    local currentWidth = X
    for i = 1, #options do
        local name, text = options[ i ][ 1 ], options[ i ][ 2 ]

        currentWidth = currentWidth + 2 + #text
        if currentWidth > target.width then
            table.insert( rows, {} )
            currentWidth = X
            Y = Y + 2
        end

        rows[ #rows ].width = ( rows[ #rows ].width or 0 ) + #text + 4
        local b = target:addNode( Button( text ):set { id = name, Y = Y } ):on( "trigger", function() cb( name ) end )

        table.insert( rows[ #rows ], b )
    end

    for r = 1, #rows do
        if not rows[ r ].width then break end

        local startX = math.ceil( target.width / 2 - ( rows[ r ].width / 2 ) + .5 )
        for b = 1, #rows[ r ] do
            local button = rows[ r ][ b ]
            button:set( "X", startX )
            startX = startX + button.width + 2
        end
    end

    return #rows
end

function MNotificationManager:expandNotification( notif )
    -- Replace notif title and body
    local target = notificationChanger:query "Page#target".result[ 1 ]
    target:query "#notif_title":set( "text", notif.title )

    local body = target:query "#notif_body".result[ 1 ]:set( "text", notif.body or "" )
    body.height = math.max( 1, math.min( #body.lineConfig.lines, 6 ) )

    -- Spawn buttons
    self:generateButtons( target, 4, body.Y + body.height + 2, notif.options, function( name ) self:closeNotifications(); self:removeNotification( notif ); notif:executeCallbacks( name ) end )

    -- Show page
    target.parent:selectPage "target"
end

function MNotificationManager:hideActive( cb )
    local notif = self.activeNotification
    if notif then
        notif:animate( "notificationSlide", "Y", -notif.height, 0.25, "inOutCubic", cb )
        notif:cancelAutoHide()
    end
end

function MNotificationManager:removeNotification( notification )
    local function remove( notif )
        for i = 1, #self.notifications do
            if self.notifications[ i ] == notif then
                table.remove( self.notifications, i )
                break
            end
        end

        notificationTiler:removeNode( notification.__ID )
        self.hasNotifications = #self.notifications > 0
    end

    if self.activeNotification == notification then
        self:hideActive( function()
            self.activeNotification = false
            remove( notification )
        end )
    else
        remove( notification )
    end
end

function MNotificationManager:updateDisplay()
    if not self.isPanelOpen then
        if not self.activeNotification then
            self.activeNotification = self.notifications[ 1 ]
        end

        if not self.activeNotification then return end
        self.activeNotification:animate( "notificationSlide", "Y", 1, 0.15 )
    end
end

configureConstructor {
    argumentTypes = {
        notifications = "table",
        hasNotifications = "boolean"
    }
}
