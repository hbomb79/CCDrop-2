abstract class MRednet {
    static = {
        channels = {
            DISCOVER = 65535;
            SEND = 6018;
            REPLY = 6019;
        }
    }
}


--[[
    @instance
    @desc
]]
function MRednet:getModems()
    self.modem = peripheral.find "modem"
end

function MRednet:openChannels()
    local modem = self.modem
    if not modem then return end

    for channelName, channel in pairs( MRednet.channels ) do
        if not modem.isOpen( channel ) then
            modem.open( channel )
        end
    end
end

function MRednet:formatMessage( content, extra )
    extra = extra or {}
    extra.content = content
    extra.sender = os.getComputerID()
    extra.name = os.getComputerLabel() or "CCDrop Client"

    return textutils.serialise( extra )
end

--[[
    @instance
    @desc
]]
function MRednet:send( channel, replyChannel, content, extra )
    local modem = self.modem
    if not modem then return end
    modem.transmit( channel, replyChannel, self:formatMessage( content, extra ) )
end

--[[
    @instance
    @desc
]]
function MRednet:handleMessage( message )
    local content = textutils.unserialise( message.content )
    if not message or ( content.target and content.target ~= os.getComputerID() ) then
        return
    end

    if content.content == "PING" and message.channel == MRednet.channels.DISCOVER and content.sender and self.allowRequests then
        -- A client has pinged us, respond so it knows we are here
        self:send( message.replyChannel, message.replyChannel, "PONG", { target = content.sender } )
    elseif content.content == "FILE_PROMPT" and message.channel == MRednet.channels.SEND then
        -- A client wants to send us a file/folder
        self:addNotification( FileNotification( content ) )
    elseif self.state == "discovering" and content.content == "PONG" and message.channel == MRednet.channels.REPLY then
        -- Our ping revealed a client
        if self.discoveryTimeout then os.cancelTimer( self.discoveryTimeout ) end
        self.discoveryTimeout = os.startTimer( 1 )

        table.insert( self.discovered, { content.sender, content.name } )
        self:executeCallbacks( "DISCOVERED_CLIENT", { content.sender, content.name } )
    elseif self.activeConnection then
        -- Pass the message to the currently open connection for handling (file transfer)
        self.activeConnection:handleMessage( message, content )
    end
end

--[[
    @instance
    @desc
]]
function MRednet:discoverClients()
    self.discoveryTimeout, self.discovered, self.discovering = os.startTimer( 3 ), {}, true

    self:query "Page#discovering #discoveryState":set { text = "Looking for clients", visible = true, colour = colours.lightBlue }
    self:query "Page#discovering #discoveryDisplay".result[ 1 ]:set( "visible", false ):clearNodes()
    self:query "Page#discovering Button#discoverRefresh":set( "enabled", false )

    self:send( MRednet.channels.DISCOVER, MRednet.channels.REPLY, "PING" )
end
