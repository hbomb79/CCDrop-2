--[[
    @static channels - table (def. { ... }) - A table that defines the DISCOVER channel (65535), the SEND channel (6018) and the REPLY channel (6019)

    A mixin that handles basic rednet communication
]]

abstract class MRednet {
    static = {
        channels = {
            DISCOVER = 65535;
            SEND = 6018;
            REPLY = 6019;
        }
    }
}


--[[
    @instance
    @desc Stores the first modem the client finds in 'modem'.
]]
function MRednet:getModems()
    self.modem = peripheral.find "modem"
end

--[[
    @instance
    @desc Opens the DISCOVER, SEND and REPLY channels on the cached modem
]]
function MRednet:openChannels()
    local modem = self.modem
    if not modem then return end

    for channelName, channel in pairs( MRednet.channels ) do
        if not modem.isOpen( channel ) then
            modem.open( channel )
        end
    end
end

--[[
    @instance
    @desc Creates a message that can be sent via rednet by serialising a table.

          If 'extra' is provided, it must be a table. Otherwise, '{}' will be used. The 'content', senderID and senderName
          will be set on 'extra' (or the blank table). The serialised result is the return value.
    @param <string - content>, [table - extra]
    @return <string - serialisedMessage>
]]
function MRednet:formatMessage( content, extra )
    extra = extra or {}
    extra.content = content
    extra.sender = os.getComputerID()
    extra.name = os.getComputerLabel() or "CCDrop Client"

    return textutils.serialise( extra )
end

--[[
    @instance
    @desc Sends the message (content and extra passed to :formatMessage) on the channel provided.
    @param <number - channel>, <number - replyChannel>, <string - content>, [table - extra]
]]
function MRednet:send( channel, replyChannel, content, extra )
    local modem = self.modem
    if not modem then return end
    modem.transmit( channel, replyChannel, self:formatMessage( content, extra ) )
end

--[[
    @instance
    @desc Handles a new message by unserialising it's content. Depending on the content and the state of
          the client, the message will be handled.

          If an activeConnection is open, and the message is not handled already (eg: message is a 'PING', 'FILE_PROMPT' or 'PONG')
          then the message will be handed to the connections :handleMessage method.
    @param <ModemEvent Instance - message>
]]
function MRednet:handleMessage( message )
    local content = textutils.unserialise( message.content )
    if not message or ( content.target and content.target ~= os.getComputerID() ) then
        return
    end

    if content.content == "PING" and message.channel == MRednet.channels.DISCOVER and content.sender and self.allowRequests then
        -- A client has pinged us, respond so it knows we are here
        self:send( message.replyChannel, message.replyChannel, "PONG", { target = content.sender } )
    elseif content.content == "FILE_PROMPT" and message.channel == MRednet.channels.SEND then
        -- A client wants to send us a file/folder
        self:addNotification( FileNotification( content ) )
    elseif self.state == "discovering" and content.content == "PONG" and message.channel == MRednet.channels.REPLY then
        -- Our ping revealed a client
        if self.discoveryTimeout then os.cancelTimer( self.discoveryTimeout ) end
        self.discoveryTimeout = os.startTimer( 1 )

        table.insert( self.discovered, { content.sender, content.name } )
        self:executeCallbacks( "DISCOVERED_CLIENT", { content.sender, content.name } )
    elseif self.activeConnection then
        -- Pass the message to the currently open connection for handling (file transfer)
        self.activeConnection:handleMessage( message, content )
    elseif content.content == "ACCEPT" then
        self:send( message.replyChannel, MRednet.channels.REPLY, "EXPIRED", { target = content.sender } )
    end
end

--[[
    @instance
    @desc Begins client discovery by:
            - Resetting dicovered clients
            - Settings a 3 second timeout
            - Settings the clients 'discovering' property to 'true'

          A 'PING' message will be broadcast on the 'DISCOVER' channel.
]]
function MRednet:discoverClients()
    self.discoveryTimeout, self.discovered, self.discovering = os.startTimer( 3 ), {}, true

    self:query "Page#discovering #discoveryState":set { text = "Looking for clients", visible = true, colour = colours.lightBlue }
    self:query "Page#discovering #discoveryDisplay".result[ 1 ]:set( "visible", false ):clearNodes()
    self:query "Page#discovering Button#discoverRefresh":set( "enabled", false )

    self:send( MRednet.channels.DISCOVER, MRednet.channels.REPLY, "PING" )
end
