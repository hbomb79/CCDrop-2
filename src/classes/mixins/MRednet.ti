abstract class MRednet {
    static = {
        channels = {
            DISCOVER = 65535;
            SEND = 6018;
            REPLY = 6019;
        }
    }
}


--[[
    @instance
    @desc
]]
function MRednet:getModems()
    self.modem = peripheral.find "modem"
end

function MRednet:openChannels()
    local modem = self.modem
    if not modem then return end

    for channelName, channel in pairs( MRednet.channels ) do
        if not modem.isOpen( channel ) then
            modem.open( channel )
        end
    end
end

function MRednet:formatMessage( content, extra )
    extra = extra or {}
    extra.content = content
    extra.sender = os.getComputerID()
    extra.name = os.getComputerLabel() or "CCDrop Client"

    return textutils.serialise( extra )
end

--[[
    @instance
    @desc
]]
function MRednet:send( channel, replyChannel, content, extra )
    local modem = self.modem
    if not modem then return end
    modem.transmit( channel, replyChannel, self:formatMessage( content, extra ) )
end

--[[
    @instance
    @desc
]]
function MRednet:handleMessage( message )
    message = textutils.unserialise( message.content )
    if not message or ( message.target and message.target ~= os.getComputerID() ) then
        return
    end

    if message.content == "PING" and message.channel == MRednet.channels.DISCOVER and message.sender and self.allowRequests then
        -- A client has pinged us, respond so it knows we are here
        self:send( message.replyChannel, message.replyChannel, "PONG", { target = message.sender } )
    elseif message.content == "FILE_PROMPT" then
        -- A client wants to send us a file/folder
        self:notify( FileNotification( message ) )
    elseif self.state == "discovering" then
        if message.content == "PONG" and message.channel == MRednet.channels.REPLY then
            -- Our ping revealed a client
            if self.discoveryTimeout then os.cancelTimer( self.discoveryTimeout ) end
            self.discoveryTimeout = os.startTimer( 1 )

            table.insert( self.discovered, { message.sender, message.name } )
        end
    end
end

--[[
    @instance
    @desc
]]
function MRednet:discoverClients()
    self.discoveryTimeout = os.startTimer( 3 )
    self.discovered = {}

    self:send( MRednet.channels.DISCOVER, MRednet.channels.REPLY, "PING" )
    self.state = "discovering"
end
