--[[
    @static ERRORS - table (def. { ... }) - A table containing error descriptions for various error codes (eg: timeout, illegal)
    @instance activeConnection - Connection Instance (def. false) - Represents the active connection (if any).

    The manager of connections. Handles the connection to clients (file transfer), and the
    reporting of current connection status.
]]

abstract class MConnectionManager {
    static = {
        ERRORS = {
            CONN_ACCEPT = {
                timeout = "CCDrop accepted the request, but got no response from the target client",
                unknown = "An unknown error prevented CCDrop from accepting the connection request from the target"
            },
            CONN_PROMPT = {
                reject = "The target client denied the transfer request",
                illegal = "This client has been blocked by the target client",
                unknown = "An unknown error meant that the connection could not be established"
            }
        }
    };

    activeConnection = false;
}

--[[
    @instance
    @desc Attempts to send files to the clientID provided. If connection fails, the user will
          be returned to the client discovery page.
    @param <number - clientID>
]]
function MConnectionManager:connectToClient( clientID )
    if self.activeConnection then return end

    local connection = Connection( self, clientID, self.sending )
    connection:connect():fail( function( _, reason )
        self:addNotification( Notification( "Failed to establish connection", MConnectionManager.ERRORS.CONN_PROMPT[ reason ] or MConnectionManager.ERRORS.CONN_PROMPT.unknown, { { "ok", "Okay" } } ) )
        connection:destroy()
        self.state = "discovering"
    end )

    self.state = "transferring"
end

--[[
    @instance
    @desc Updates the information on the 'transferring' page to match the information given.

          If 'isTerm', the ProgressBar on the transferring page will be visible.
    @param <string - title>, <string - body>, [boolean - isTerm]
]]
function MConnectionManager:updateStatus( title, body, isTerm )
    local pg = self:query "Page#transferring".result[ 1 ]
    pg:query "Label.header":set( "text", title or "Waiting for Connection" )
    pg:query "TextContainer#body":set( "text", body or "CCDrop is waiting for the other client to accept the file transfer request" )
    pg:query "Button#connectionAbort":set { text = isTerm and "Terminate" or "Abort", backgroundColour = isTerm and colours.red or 256, colour = isTerm and 1 or 128 }

    pg:query "ProgressBar":set( "visible", isTerm )
end

--[[
    @instance
    @desc Changes the state of the CCDrop client so that the user can view a list
          of file paths that will be downloaded from the target client.

          The user can either accept or reject the connection from this screen.
    @param <number - clientID>, <table - paths>
]]
function MConnectionManager:reviewClientConnection( clientID, paths )
    local pg = self:query "Page#review".result[ 1 ]

    local cont = pg:query "ScrollContainer#body".result[ 1 ]
    local path, overwriting = paths[ i ], false
    for i = 1, #paths do
        local l = Label( paths[ i ], 1, i )
        if TI_VFS_RAW.fs.exists( paths[ i ] ) then
            overwriting = true
            l:set( "colour", colours.red )
        end

        cont:addNode( l )
    end

    pg:query "TextContainer":set( "text", "Review the paths below before accepting transfer" .. ( overwriting and ". Paths in red will be overwritten" or "" ) )
    pg:query "Button#reject":on( "trigger", function() self:rejectClientConnection( clientID ) end, "reviewReject" )
    pg:query "Button#accept":on( "trigger", function() self:acceptClientConnection( clientID, paths ) end, "reviewAccept" )

    self.state = "review"
end

--[[
    @instance
    @desc Accepts an incoming file transfer request from the client given.

          If an active connection is already present, that connection must be terminated
          before this new connection can be opened.

          If the connection fails to establish the user will be notified and the connection
          instance will be destroyed.
    @param <number - clientID>, <table - paths>
]]
function MConnectionManager:acceptClientConnection( clientID, paths )
    -- Check that the client is still alive
    local function send()
        local connection = Connection( self, clientID )
        connection.filesToTransfer = #paths
        connection:connect():fail( function( _, reason )
            if not reason or reason ~= "expired" then self:addNotification( Notification( "Failed to establish connection", MConnectionManager.ERRORS.CONN_ACCEPT[ reason ] or MConnectionManager.ERRORS.CONN_ACCEPT.unknown, { { "ok", "Okay" } } ) ) end
            connection:destroy()
        end )
    end

    if self.activeConnection then
        local n = self:addNotification( Notification( "Failed to send", "File sending unavailable -- There is already an active connection.", { { "ok", "Okay" }, { "close", "Terminate Connection" } } ) )
        n:on("close", function() self.activeConnection:terminate(); send() end)
    else send() end
end

--[[
    @instance
    @desc Replies to the clientID provided that this target does not want to accept this
          request.
]]
function MConnectionManager:rejectClientConnection( clientID )
    self:send( MRednet.channels.REPLY, MRednet.channels.REPLY, "REJECT", { target = clientID } )
end
