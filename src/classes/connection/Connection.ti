--[[
    @static states - table (def. { ... }) - A table that contains the enumeration values that can be used for the connections 'state'
    @instance state - number (def. false) - The state of the connection. The number used is the representation of one (of seven) enumeration values in Connection.static.states. Should not be changed manually.
    @instance def - Deferred Instance (def. false) - The current deferred object of the connection. If one is present when the connection experiences a timeout, the deferred will be used to inform processes running in parallel.
    @instance cachedPath - number (def. 1) - A number presenting the nth path being sent (eg: when 1, the first path is being sent -- when 3, the third path is being sent). Used by a SENDING connection to keep track of the next path to send.
    @instance filesTransferred - number (def. 0) - The amount of files transferred (successfully) to/from the sender (sending/receiving).
    @instance receivedFiles - table (def. {}) - A table containing the files received (key-value pair: path = content).
    @instance filesToTransfer - number (def. 0) - The amount of files to be transferred (sending/receiving)

	The file transfer class of CCDrop. Once created and bound to a CCDrop client, this class
    is able to initiate OR receive a file transfer to/from a client within rednet range.

    The connection is able to hold one of 7 states (or 'false', meaning the connection has not started yet):
        IDLE (0) - The connection is currently not active (ie: has just be instantiated, or has finished a transfer/been destroyed)
        CHECKING (1) - The connection (a receiving connection) is checking that the client that proposed the connection is still alive. Once it confirms the client is alive, it will begin receiving files.
        PROMPTING (2) - The connection (a sending connection) is waiting for an ACCEPT message from the target client (ie: waiting for the other client to enter 'CHECKING' state).
        CONFIRMATION (3) - The connection (a sending connection) has just sent a file and is waiting for the target client to confirm that it received the payload.
        RECEIVING (4) - The connection (a receiving connection) is waiting for files. When files are received from the target client, a confirmation will be sent back to confirm successful transfer.
        CLOSING (5) - The connection (a sending connection) has finished sending all files and is closing the connection once confirmation of transfer success is received from the target client.
        TERMINATING (6) - The connection is being forcibly closed by the user.

    Once the connection is complete (ie: the connection: was terminated [either party], failed [eg: lost connection, no confirmation, failed to save files], successfully completed) it is
    destroyed (the client no longer tracks the connection).
]]

class Connection {
    static = {
        states = {
            IDLE = 0;
            CHECKING = 1;
            PROMPTING = 2;
            CONFIRMATION = 3;
            RECEIVING = 4;
            CLOSING = 5;
            TERMINATING = 6;
        }
    };

    state = false;
    def = false;

    cachedPath = 1;
    filesTransferred = 0;
    receivedFiles = {};
    filesToTransfer = 0;
}

--[[
	@constructor
	@desc Instantiates the connection by setting the owner, targetID, paths (if present -- only present when sending).

          An already active connection on the client will be destroyed (or else, error). Otherwise, the active connection
          will be set to this connection.

          Until 'connect' is called, the connections state will remain 'IDLE'
]]
function Connection:__init__( ccdrop, id, paths )
    self.owner, self.target, self.paths, self.state = ccdrop, id, paths, "idle"
    if paths then self.filesToTransfer = #paths end

    if ccdrop.activeConnection and ccdrop.activeConnection ~= self then
        if ccdrop.activeConnection.open then
            error( "Cannot spawn Connection instance targetting '"..tostring( id ).."'. An active connection is already open on the CCDrop instance." )
        else
            ccdrop.activeConnection:destroy( true )
        end
    else
        ccdrop.activeConnection = self
    end
end

--[[
    @instance
    @desc Ensures the target is still active and is willing and able to accept the files proposed by the transfer
]]
function Connection:connect()
    if self.paths then
        self.state = "prompting"
        self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "FILE_PROMPT", { file_list = self.paths, target = self.target } )
    else
        self:resetTimeout( 2 )
        self.state = "checking"
        self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "ACCEPT", { target = self.target } )
    end

    self.owner:updateStatus()
    return self:setDef( Deferred() )
end

--[[
    @instance
    @desc Sends the next (or first) file (dictated by 'self.cachedPath').
          If all files are sent, closes the connection with the other client.
          If files are still needing to the sent:
            - File is checked and loaded (if not found, connection fails)
            - Sends the file
            - Changes state to 'CONFIRMATION' and waits (max. 5 second wait, else failure) for confirmation from target client
]]
function Connection:pushFile()
    local path = self.paths[ self.cachedPath ]
    if path then
        -- Send the file
        if not fs.exists( path ) then
            local reason = "Cannot send file '"..path.."', not found"
            self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "FAILED", { target = self.target, reason = reason } )
            self:failTransfer( reason )
            return
        end

        local h = fs.open( path, "r" )
        local content = h.readAll()
        h.close()

        self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "FILE", { target = self.target, file = content, path = path })
        self:resetTimeout( 5 )
        self.state = "confirmation"
    else
        -- Tell the target we are done
        self.state = "closing"
        self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "FINISHED", { target = self.target } )
        self.owner:updateStatus( "Finishing Transfer", "CCDrop is waiting on the other client to finalize the transfer. This should only take a moment or two.", true )

        self:resetTimeout( 5 )
    end
end

--[[
    @instance
    @desc Changes the state of the owner (CCDrop client) to match 'returnState' -- or 'root' if no returnState specified.
          Sets the client's trouble code to 'failed' and destroys the active connection.

          If no 'reason' provided, the client will display 'unkown reason'.
    @param [string - reason], [string - returnState]
]]
function Connection:failTransfer( reason, returnState )
    self.owner.state = returnState or "root"
    -- self.owner:addNotification( Notification( "File Transfer Failed", "The target client failed to send files for reason: " .. ( reason or "unknown reason" ) ))
    self.owner.trouble = "failed"
    self:destroy()

    if self.timeout then os.cancelTimer( self.timeout ) end
end

--[[
    @instance
    @desc Resets the timer attached to this connection. Used to set timeouts for the connection.

          If no 'time' is given, defaults to 3 (seconds). Once the timer fires (due to not being
          cancelled, usually if the connection times out) the connection will likely close (see 'handleTimeout')
    @param [number - time]
]]
function Connection:resetTimeout( time )
    if self.timeout then os.cancelTimer( self.timeout ) end
    self.timeout = os.startTimer( time or 3 )
end

--[[
    @instance
    @desc Handles the message provided by using the current connections 'state' to
          determine what the message means.

          If the message is not recognised, the connection is idle, or the message is
          from a foreign sender; it will be ignored.
    @param <ModemEvent Instance - message>, <string - content>
]]
function Connection:handleMessage( message, content )
    if self.state == Connection.states.IDLE or content.sender ~= self.target then return
    elseif content.content == "TERMINATE" then
        -- The target has terminated our (not idle) connection. Let them know we saw this request
        self.owner:send( message.replyChannel, MRednet.channels.REPLY, "TERMINATED", { target = self.target } )

        -- Let this client know the connection was terminated
        self.owner.trouble = "terminated"

        -- Discard this connection
        self.state = "idle"
        self:destroy()
    elseif self.state == Connection.states.CHECKING then
        -- This connection is checking that the client is still alive
        if content.content == "COMMENCING_TRANSFER" then
            -- The target computer responded, and is able to continue
            self.def:accept()

            self.state = "receiving"
            self:resetTimeout()

            self.owner.state = "transferring"
            self.owner:updateStatus( "Transferring files", "CCDrop is transferring the target files to the target...", true )
        elseif content.content == "EXPIRED" then
            self.def:reject "expired"
            self.owner.trouble = "expired"
        end
    elseif self.state == Connection.states.PROMPTING then
        -- This connection is waiting for the target to accept transfer request
        if content.content == "ACCEPT" then
            -- The target accepted. Let it know we are commencing (ie: still alive)
            self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "COMMENCING_TRANSFER", { target = self.target } )
            self.def:accept()

            self:pushFile()
            self.owner:updateStatus( "Transferring files", "CCDrop is transferring the target files to the target...", true )
        elseif content.content == "REJECT" then
            -- The target rejected our request
            self.def:reject "reject"
        elseif content.content == "ILLEGAL" then
            -- The target has blocked this client
            self.def:reject "illegal"
        end
    elseif self.state == Connection.states.RECEIVING then
        -- Waiting to receive files
        if content.content == "FILE" then
            local path = content.path
            if self.receivedFiles[ path ] then
                self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "FAILED", { target = self.target, path = path, reason = "File already received" } )
                self:failTransfer( "Duplicate files received from target, including '"..path.."'" )
            else
                self.receivedFiles[ path ], self.filesTransferred = content.file, self.filesTransferred + 1
                self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "CONFIRMED", { target = self.target, path = path } )
            end

            self:resetTimeout()
        elseif content.content == "FAILED" then
            -- The file transfer failed. The target client couldn't send the next file.
            self:failTransfer( content.reason )
        elseif content.content == "FINISHED" then
            -- The file transfer is complete. Save the files and return to menu
            self.owner:updateStatus( "Saving files", "The file transfer has completed, CCDrop is now saving the downloaded files", true )
            local tFS = TI_VFS_RAW.fs
            for path, content in pairs( self.receivedFiles ) do
                if tFS.isReadOnly( path ) then
                    self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "FAILED", { target = self.target, path = path, reason = "Path is read only (cannot be modified)" } )
                    self:failTransfer()
                    return
                else
                    local h = tFS.open( path, "w" )
                    h.write( content )
                    h.close()
                end
            end

            self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "SUCCESS", { target = self.target } )
            self.owner.state = "finished"
            self:destroy()
        end
    elseif self.state == Connection.states.CONFIRMATION then
        -- Just sent a file. Waiting for confirmation that the file was received.
        if content.path == self.paths[ self.cachedPath ] then
            if content.content == "CONFIRMED" then
                self.cachedPath, self.filesTransferred = self.cachedPath + 1, self.filesTransferred + 1
                self:pushFile()
            elseif content.content == "FAILED" then
                -- Tell the user the transfer failed. The connection has already been terminated by the other target.
                self:failTransfer( content.reason )
            end
        end
    elseif self.state == Connection.states.CLOSING then
        if content.content == "SUCCESS" then
            self.owner.state = "finished"
            self:destroy()
        elseif content.content == "FAILED" then
            self:failTransfer( content.reason )
        end
    elseif self.state == Connection.states.TERMINATING then
        if content.content == "TERMINATED" then
            self.owner.state = "root"
            self.def:accept()
            self.state = "idle"

            self:destroy()
        end
    end
end

--[[
    @instance
    @desc If the connections timer fires, it usually indicates a failure to respond in a timely manner (aka: a timeout).
          If the timer files while:
            - The connection is trying to determine whether or not the client is alive (while accepting transfer)
            - The connection is terminating
          The attached deferred instance will be rejected with the argument 'timeout'.

          If the timer fires while:
            - The connection is waiting for files
            - The connection is waiting for confirmation about a sent file
            - The connection is closing
          Then the connection has been lost and the connection instance will be destroyed (and the CCDrop client will
          have it's trouble code set to 'connLost'.
]]
function Connection:handleTimeout()
    if self.state == Connection.states.CHECKING or self.state == Connection.states.TERMINATING then
        if self.def then self.def:reject "timeout" end
    elseif self.state == Connection.states.RECEIVING or self.state == Connection.states.CONFIRMATION or self.state == Connection.states.CLOSING then
        self:destroy()
        self.owner.trouble = "connLost"
    end
end

--[[
    @instance
    @desc Terminates the connection (effectively aborting it causing data loss. The other party will not save the files sent).
          If the termination request occurs while:
            - The connection is IDLE
            - The connection is waiting for the target client to accept transfer
          The connection will be destroyed and the CCDrop client will return to the discovery page

          If the termination request occurs at *any other time* AND 'force' is true, the target client will
          be informed that the connection is CLOSED and this connection will be immediately destroyed.

          IF the termination request occurs are *any other time* AND 'force' is NOT true, the user will be
          shown a dialog box warning them about the consequences of terminating an in-progress connection. If
          the user decides to terminate regardless, the state of the connection will be changed to 'TERMINATING'
          and the target client will informed that the connection is closed.
          If the target client does not respond within 2 seconds (to ackowledge closure) then it will be assumed
          that the connection is already dead.
    @param [boolean - force], [function - callback]
]]
function Connection:terminate( force, callback )
    if self.state == Connection.states.IDLE or self.state == Connection.states.PROMPTING then
        self:destroy()
        self.owner.state = "discovering"

        if type( callback ) == "function" then callback( self, 1 ) end
    else
        if force then
            -- Forcibly terminate the connection
            self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "TERMINATE", { target = self.target } )
            self:destroy()

            if type( callback ) == "function" then callback( self, 2 ) end
            return
        end

        local def, owner = self:setDef( Deferred() ), self.owner

        local diag = owner:addDialog( DialogWindow( 1, 1, 37, 8, "Are you sure?", "Terminating the active connection will cause incomplete data transfer." ) )
        diag:set {
            X = "$parent.width / 2 - self.width / 2",
            Y = "$parent.height / 2 - self.height / 2"
        }

        diag:addNode( Button( "Cancel" ) ):on( "trigger", function() owner:removeDialog( diag ) end)
        diag:addNode( Button( "Terminate Anyway" ) ):on( "trigger", function( this )
            -- The user has decided to terminate
            self.state = "terminating"

            -- Send the target a message letting us know we are forcefuly closing the connection.
            self:resetTimeout( 2 )
            self.owner:send( MRednet.channels.SEND, MRednet.channels.REPLY, "TERMINATE", { target = self.target } )

            -- Change the dialog window to display information regarding the termination attempt
            diag:set { title = "Terminating", closeable = false, body = "Attempting to negotiate connection termination with other client. Please wait" }
            diag:clearNodes()

            def:success( function() owner:removeDialog( diag ) end ):fail( function()
                -- The deffered failed, which means the termination request timed out
                diag:set { closeable = true, title = "No response", body = "We attempted to terminate the remote connection, but saw no response. The target client has likely gone offline so the connecion has been discarded." }
                diag:addNode( Button( "Okay" ) ):on( "trigger", function() owner:removeDialog( diag ) end )

                self:destroy()
                if type( callback ) == "function" then callback( self, 3 ) end
                owner.state = "root"
            end )
        end)
    end
end

--[[
    @instance
    @desc Destroys the connection by ordering the CCDrop client to remove it from it's 'activeConnection'. The state of the connection
          will be updated to 'IDLE'.
]]
function Connection:destroy()
    if self.owner.activeConnection == self then
        self.owner.activeConnection = nil
    end

    self.state = "idle"
end

--[[
    @setter
    @desc Sets the state of the connection to the value of the enum represented by the upper-case version of the name given. For
          example, setting the state to 'idle' will use the value of the 'IDLE' enum (0).
    @param <string - name>
]]
function Connection:setState( name )
    self.state = Connection.states[ name:upper() ] or error( "Unknown state '"..name.."'" )
end

--[[
    @setter
    @desc Sets the amount of filesTransferred, and updates the connection progress bar to reflect the transfer progress.
    @param <number - filesTransferred>
]]
function Connection:setFilesTransferred( filesTransferred )
    self.filesTransferred = filesTransferred
    self.owner:query "ProgressBar".result[ 1 ].percentage = math.floor( ( self.filesTransferred / self.filesToTransfer ) * 100 )
end

--[[
    @setter
    @desc Sets the deferred instance attached to the connection.
          If a deferred is already attached, AND 'fail' is true: the def object will be rejected. If a def is already
          attached, and not 'fail': the def instance will be accepted.

    @param <Deferred Instance - def>, [boolean - fail]
    @return <Deferred Instance - def>
]]
function Connection:setDef( def, fail )
    if self.def then
        self.def[ fail and "reject" or "accept" ]( self.def )
    end

    self.def = def
    return def
end
