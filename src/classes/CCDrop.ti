--[[
    @static TROUBLE_CODES - table (def. { ... }) - A table containing presentable information (title, description) on possible errors the client could encounter (eg: connection lost, termination, failures, etc).
    @instance backgroundColour - colour (def. 128) - The background colour of the application. Manually changed to 128 (grey) for the client.
    @instance colour - colour (def. 1) - The foreground colour of the application. Manually changed to 1 (white) for the client.
    @instance allowRequests - boolean (def. true) - If false, incoming file transfer requests will be ignored
    @instance state - string (def. false) - A string (or boolean false if no state) that represents the current state of the clients state machine. Should not be changed.

    The core class for the CCDrop client. Provides the ability for the user to send
    and receive files by utilising various mixins (and directly extended Titaniums built-in
    Application class).
]]

class CCDrop extends Application mixin MRednet mixin MNotificationManager mixin MPlexusHandler mixin MConnectionManager {
    static = {
        TROUBLE_CODES = {
            unknown = { "Unknown error occured", "CCDrop has encountered a problem, however it has not been caught correctly by the application.\n\nIf this issue persists, please report on the CC forums or via GitLab issues", true },
            rednet = { "Rednet modem not found", "CCDrop relies on rednet to transmit files between clients.\n\nNo modem can be found on your computer, please attach one in order to continue" },
            noFiles = { "No files were selected", "CCDrop cannot continue begin to transmit files because you selected no files. Select files before trying again.", true },
            invalidFiles = { "Invalid Paths", "CCDrop cannot begin file transfer because some of the paths chosen do not exist.\n\nRevise paths and try again", true },
            connLost = { "Connection Lost", "The connection to the target dropped. File transfer has been terminated -- Apologies for the inconvenience.", "root" },
            expired = { "Cannot establish connection", "The request you are attempting to accept has been revoked by the sender.", true },
            terminated = { "Connection Terminated", "The other client has terminated the connection. The transfer has been discarded, and no files have been saved", "root" },
            failed = { "Transfer Failed", "The file transfer failed. Please try again later.\n\nIf you continue to experience the issue report it on the CC Forums, or GitLab.", "root" }
        }
    };

    backgroundColour = 128;
    colour = 1;

    allowRequests = true;

    state = false; -- can be sending, picking, receiving, discovering, root or error
}

--[[
    @constructor
    @desc Constructs the CCDrop instance by attaching event listeners to various events (for peripheral/message management).

          Also binds the listeners for discovery events (DISCOVERED_CLIENT, DISCOVERY_FINISH) which are used when
          pinging available clients for file transfer.
]]
function CCDrop:__init__( ... )
    self:resolve( ... )
    self:super( ... )

    self:on( "terminate", function()
        self:stop()
        term.clear()
    end )

    self:on( "modem_message", self.handleMessage )
    self:on( "peripheral", self.checkForTrouble )
    self:on( "peripheral_detach", self.checkForTrouble )
    self:on( "timer", self.handleTimer )
    self:on( "hiddenActive", function()
        self:schedule( function()
            self:updateDisplay()
        end, 1, "show_new_notif")
    end)

    self:on( "DISCOVERED_CLIENT", function( ccdrop, client )
        if self.state ~= "discovering" then return end

        self:query "Page#discovering #discoveryState":set( "visible", false )
        local display = self:query "Page#discovering #discoveryDisplay".result[ 1 ]:set( "visible", true )
        display.fluidPositioning, display.positioning = true, "fluid"

        display:addNode( Button( tostring( client[ 1 ] ) ):set {
            backgroundColour = colours.cyan, colour = 1,
            width = "$#self.text + 4", height = 3,
            marginRight = 2, marginBottom = 1,
            verticalAlign = "centre"
        } ):on( "trigger", function( button )
            self:connectToClient( client[ 1 ] )
        end )

        display:resolveFluidPositions()
    end )

    self:on( "DISCOVERY_FINISH", function()
        if self.state == "discovering" and #self.discovered == 0 then
            self:query "Page#discovering #discoveryState":set { text = "No CCDrop clients found", colour = colours.red }
        end
    end, "DISCOVERY_DISPLAY")
end

--[[
    @instance
    @desc Sets the state of the client to the state provided (or, if no state provided, refreshes the current state).

          When the state is set (or current state is refreshed) the page of the application (main paginator) is set
          to the state (OR, if the client is currently in trouble the 'error' page will be shown).
    @param [string - state]
]]
function CCDrop:setState( state )
    self.state = state or self.state
    pages:selectPage( self.trouble and "error" or self.state )
end

--[[
    @instance
    @desc WIP
]]
function CCDrop:revealSettings()
    --TODO
end

--[[
    @instance
    @desc WIP
]]
function CCDrop:concealSettings()
    --TODO
end

--[[
    @instance
    @desc Updates the clients information regarding available modems. Once updated, channels for
          sending, replying and receiving are opened (See MRednet for information of modem channels)
]]
function CCDrop:updatePeripherals()
    self:getModems()
    self:openChannels()
end

--[[
    @instance
    @desc Sets the trouble code of the client. If a key matching the trouble code is found
          in the CCDrop.static.TROUBLE_CODES table, the information from that key will
          be used. If not, an unknown error message will be displayed.

          When the trouble is set the client's state is refreshed (causing the 'error'
          page to display).

          If no 'troubleCode' is set, the trouble state of the client will be set to false
          and the state will be refreshed (showing the page corresponding to the current
          state of the client).
    @param [string - troubleCode]
]]
function CCDrop:setTrouble( code )
    self.trouble = code or false
    if code then
        local trouble = CCDrop.static.TROUBLE_CODES[ code ] or CCDrop.static.TROUBLE_CODES.unknown
        self:query "Page#error .header#title".result[ 1 ].text = trouble[ 1 ]
        self:query "Page#error TextContainer#body".result[ 1 ].text = trouble[ 2 ]
        self:query "Page#error Button#return":set( "visible", trouble[ 3 ] and true or false )
    end

    self:setState()
end

--[[
    @instance
    @desc Checks common trouble scenarios and signals client trouble if one
          is true (for instance, if no modems are found the 'rednet' trouble
          code will be set).
]]
function CCDrop:checkForTrouble()
    self:updatePeripherals()
    if not self.modem then
        self.trouble = "rednet"
    else
        self.trouble = false
    end
end

--[[
    @instance
    @desc Sets the state of the client to 'picking', causing the embedded instance of Plexus to be revealed
]]
function CCDrop:pickContent()
    self.state = "picking"
end

--[[
    @instance
    @desc Gathers the selected files from the embedded Plexus instance
          and starts discovering clients (one of which can be selected
          and file transfer can begin [once other party accepts file
          transfer request]).

          If one of the files selected no longer exists, or no
          files are selected the client's trouble code will be set
          to 'invalidFiles' or 'noFiles', respectively.
]]
function CCDrop:sendContent()
    local resolved, paths = self.embeddedPlexus.resolvedSelections, {}
    for path, selectionState in pairs( resolved ) do
        if selectionState == 2 then
            if not fs.exists( path ) then
                self.trouble = "invalidFiles"
                return
            elseif not fs.isDir( path ) then
                paths[ #paths + 1 ] = path
            end
        end
    end

    if #paths == 0 then
        self.trouble = "noFiles"
        return
    end

    self.sending, self.state = paths, "discovering"
    self:discoverClients()
end

--[[
    @instance
    @desc Handles a fired timer. If the timer is the discoveryTimeout, the client
          will STOP discovering new clients and the 'DISCOVERY_FINISH' callback
          will be executed.

          If the time is the timeout timer for the active connection, the
          timer ID will be passed to the activeConnection for further
          handling (usually results in somesort of 'timeout' action, such
          as connection lost).
    @param <Event Instance - timer>
]]
function CCDrop:handleTimer( timer )
    if self.state == "discovering" and timer.data[ 2 ] == self.discoveryTimeout then
        self.discovering = false
        self:query "Page#discovering Button#discoverRefresh":set( "enabled", true )
        self:executeCallbacks "DISCOVERY_FINISH"
    elseif self.activeConnection and timer.data[ 2 ] == self.activeConnection.timeout then
        self.activeConnection:handleTimeout()
    end
end
