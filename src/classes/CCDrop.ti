class CCDrop extends Application mixin MRednet mixin MNotificationManager mixin MFileManager mixin MPlexusHandler {
    backgroundColour = 128;
    colour = 1;

    allowRequests = true;

    state = false; -- can be sending, picking, receiving, discovering, root or error
}

--[[
    @constructor
    @desc
]]
function CCDrop:__init__( ... )
    self:resolve( ... )
    self:super( ... )

    self:on( "terminate", function()
        self:stop()
        term.clear()
    end )

    self:on( "modem_message", self.handleMessage )
    self:on( "peripheral", self.updatePeripherals )
    self:on( "hiddenActive", function()
        self:schedule( function()
            self:updateDisplay()
        end, 1, "show_new_notif")
    end)
end

--[[
    @instance
    @desc
]]
function CCDrop:setState( state )
    pages:selectPage( state )
    self.state = state
end

function CCDrop:revealSettings()
    local win = Window():set {
        X = "$application.width * 0.2",
        Y = "$application.height * 0.1",
        width = "$application.width * 0.6",
        height = "$application.height * 0.8",
        backgroundColour = 256,
        title = "Settings",
        resizeable = false,
        moveable = false
    }
    win:importFromTML "src/ui/dialogs/settings.tml"
    self:addDialog( win )
end

function CCDrop:concealSettings()

end

function CCDrop:updatePeripherals()
    self:getModems()
    self:openChannels()
end

--[[
    @instance
    @desc
]]
function CCDrop:pickContent()
    self.state = "picking"
end

--[[
    @instance
    @desc
]]
function CCDrop:sendContent()
    local resolved = self.embeddedPlexus.resolvedSelections
    local paths = {}

    for path, selectionState in pairs( resolved ) do
        if selectionState == 2 then
            if not fs.exists( path ) then
                self:throw( "Failed to send", "Could not begin file transmission because selected files do not exist ("..path.."). Revise file selection and retry." )
            elseif not fs.isDir( path ) then
                paths[ #paths + 1 ] = path
            end
        end
    end

    self:reviewContent( paths )
end

--[[
    @instance
    @desc WIP
]]
function CCDrop:reviewContent( paths )
    error "hit"
end

--[[
    @instance
    @desc
]]
function CCDrop:receiveContent()

end
