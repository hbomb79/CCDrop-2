--[[
    @instance title - string (def. "Notification") - The title of the notification
    @instance body - string (def. false) - The body of the notification (if any)
    @instance options - table (def. false) - The options (responses) of the notification (format: { { name, displayText }, { ... }, ... }).
    @instance collapsed - boolean (def. true) - If false, the notification is expanded (response buttons visible)
    @instance height - number (def. 4) - The height (unless expanded) of the notification
    @instance X - number (def. 4) - The X position of the notification
    @instance backgroundColour - colour (def. 1) - The background colour of the notification (white)

    A custom node that acts as a notification. Used to inform the user
    of important information, OR to ask the user for input.

    If 'options' is provided, it must be a list of tables -- the first index being the 'name' of the option, the second index being the 'displayText' of the option.
    A button for each option will be set. The text of the button will be set to the 'displayText' of each option, when the button is triggered it will
    execute a callback on this notification -- the name of the callback executed will be the 'name' of the option.

    This options table is valid: { { "choice1", "First Choice" }, { "choice2", "Another choice" } }. Clicking on the second button will
    call the 'choice2' callback on the notification (use notificationInstance:on( "choice2", fn ) to catch).
]]

class Notification extends Container {
    title = "Notification";
    body = false;
    options = false;
    collapsed = true;

    height = 4;
    X = 4;
    backgroundColour = 1;
}

--[[
    @constructor
    @desc Starts the basic construction of the notification (creates the title label and hide button)
]]
function Notification:__init__( ... )
    self:resolve( ... )
    self:super( ... )

    self.titleLabel = self:addNode( Label( self.title ) ):set {
        colour = 128;
        Y = 2;
        X = 2;
    }

    self:addNode( Button "x" ):set {
        id = "notif_hide";
    }:on("trigger", function()
        if client.activeNotification == self then
            client:hideActive()
        end
    end)
end

--[[
    @instance
    @desc Completes node construction by adjusting Y, width and heignt to suite the notification (eg: the length of the body, amount of options).
]]
function Notification:configure()
    self.Y = -self.height
    self.width = "$parent.width - 6"

    if self.body then
        self.bodyTextContainer = self:addNode( TextContainer( self.body ) ):set( "height", math.min( math.ceil( #self.body / TERM_X + .5 ), 4 ) )
    end

    local lines = client:generateButtons( self, 2, ( self.body and self.bodyTextContainer.height or 0 ) + 5, false, function( name )
        self:executeCallbacks( name )
        client:removeNotification( self )
    end)

    if self.body or self.options then
        self.expandButton = self:addNode( Button( _HOST and "\31" or "Show More" ) ):set( "Y", 4 ):on("trigger", function()
            client:unschedule "notif_autohide"
            self:removeNode( self.expandButton )
            self.collapsed = false

            self:animate( "notificationExpand", "height", math.ceil( self.body and ( #self.body / TERM_X +.5 ) or 0 ) + 4 + ( lines * 2 ), 0.125, "inOutSine" )
        end)

        self.expandButton:addClass "centre"
    end
end

configureConstructor({
    orderedArguments = { "title", "body", "options" };
    argumentTypes = {
        title = "string",
        body = "string",
        options = "table",
        collapsed = "boolean"
    }
}, true)
